"""
Module de gestion des donn√©es des v√©hicules.

Ce module propose une fonction permettant de filtrer les donn√©es des v√©hicules en fonction de diff√©rents crit√®res
comme la marque, le mod√®le, l'ann√©e, le kilom√©trage, la bo√Æte de vitesses, l'√©nergie et le prix.

"""

import duckdb
from polars import DataFrame

def get_dataframe(marques: list, modeles: list, annee_min: int, annee_max: int, km_min: int, km_max: int, boite: list, energie: list, prix_min: int, prix_max: int) -> DataFrame:
    """
    Filtre les donn√©es des v√©hicules en fonction de crit√®res sp√©cifi√©s et retourne un DataFrame.

    ## Parameters:
        marques (list): Liste de noms de marques √† filtrer. Si vide, aucune restriction par marque.
        modeles (list): Liste de noms de mod√®les √† filtrer. Si vide, aucune restriction par mod√®le.
        annee_min (int): Ann√©e minimale des v√©hicules √† inclure dans le filtre.
        annee_max (int): Ann√©e maximale des v√©hicules √† inclure dans le filtre.
        km_min (int): Kilom√©trage minimal des v√©hicules √† inclure dans le filtre.
        km_max (int): Kilom√©trage maximal des v√©hicules √† inclure dans le filtre.
        boite (list): Liste de types de bo√Ætes de vitesses √† inclure dans le filtre.
        energie (list): Liste de types d'√©nergie √† inclure dans le filtre.
        prix_min (int): Prix minimal des v√©hicules √† inclure dans le filtre.
        prix_max (int): Prix maximal des v√©hicules √† inclure dans le filtre.

    ## Returns:
        DataFrame: DataFrame Polars contenant les donn√©es des v√©hicules filtr√©es selon les crit√®res sp√©cifi√©s.

    ## Note:
        Les crit√®res de filtrage peuvent √™tre sp√©cifi√©s individuellement ou en combinaison, selon les besoins.
    
    ## Example:
        >>> get_dataframe(['MERCEDES'], ['C220'], 2010, 2022, 0, 100000, ['Automatique'], ['Essence'], 10000, 50000)
        # Retourne un DataFrame contenant les donn√©es des v√©hicules de la marque MERCEDES, du mod√®le C220, 
        # de l'ann√©e entre 2010 et 2022, avec un kilom√©trage entre 0 et 100 000, une bo√Æte de vitesses automatique,
        # fonctionnant √† l'essence et avec un prix entre 10 000 et 50 000.

    """

    if marques == [] and modeles == []:
        return duckdb.sql(
            f"""
            SELECT CONCAT(
            marque, ' ', modele, ' ',
            CASE WHEN generation = 'NA' THEN '' ELSE generation END,
            ' ', finition
            ) as V√©hicule, 
            cylindre, puissance, moteur, annee, boite, energie, kilometrage, prix, 
            CASE
                WHEN position_march√© = 'Bonne affaire' THEN 'Bonne affaire üëç'
                WHEN position_march√© = 'Tr√®s bonne affaire' THEN 'Tr√®s bonne affaire üåü'
                WHEN position_march√© = 'Au dessus du march√©' THEN 'Au dessus du march√© üí∞'
                WHEN position_march√© = 'Offre √©quitable' THEN 'Offre √©quitable ü§ù'
                WHEN position_march√© = 'Analyse indisponible' THEN 'Analyse indisponible ‚ùå'
                ELSE position_march√©
            END as Position_march√©,
            lien
            FROM 'data/database.parquet'
            WHERE annee BETWEEN {annee_min} AND {annee_max}
            AND kilometrage BETWEEN {km_min} AND {km_max}
            AND boite IN ({', '.join(f"'{b}'" for b in boite)})
            AND energie IN ({', '.join(f"'{erg}'" for erg in energie)})
            AND prix between {prix_min} AND {prix_max}
            """).pl()
    
    if marques != [] and modeles == []:
        return duckdb.sql(
            f"""
            SELECT CONCAT(
            marque, ' ', modele, ' ',
            CASE WHEN generation = 'NA' THEN '' ELSE generation END,
            ' ', finition
            ) as V√©hicule, 
            cylindre, puissance, moteur, annee, boite, energie, kilometrage, prix, 
            CASE
                WHEN position_march√© = 'Bonne affaire' THEN 'Bonne affaire üëç'
                WHEN position_march√© = 'Tr√®s bonne affaire' THEN 'Tr√®s bonne affaire üåü'
                WHEN position_march√© = 'Au dessus du march√©' THEN 'Au dessus du march√© üí∞'
                WHEN position_march√© = 'Offre √©quitable' THEN 'Offre √©quitable ü§ù'
                WHEN position_march√© = 'Analyse indisponible' THEN 'Analyse indisponible ‚ùå'
                ELSE position_march√©
            END as Position_march√©,
            lien
            FROM 'data/database.parquet'
            WHERE marque IN ({', '.join(f"'{marque}'" for marque in marques)})
            AND annee BETWEEN {annee_min} AND {annee_max}
            AND kilometrage BETWEEN {km_min} AND {km_max}
            AND boite IN ({', '.join(f"'{b}'" for b in boite)})
            AND energie IN ({', '.join(f"'{erg}'" for erg in energie)})
            AND prix between {prix_min} AND {prix_max}
            """).pl()
    
    if marques == [] and modeles != []: 
        return duckdb.sql(
            f"""
            SELECT CONCAT(
            marque, ' ', modele, ' ',
            CASE WHEN generation = 'NA' THEN '' ELSE generation END,
            ' ', finition
            ) as V√©hicule, 
            cylindre, puissance, moteur, annee, boite, energie, prix, 
            CASE
                WHEN position_march√© = 'Bonne affaire' THEN 'Bonne affaire üëç'
                WHEN position_march√© = 'Tr√®s bonne affaire' THEN 'Tr√®s bonne affaire üåü'
                WHEN position_march√© = 'Au dessus du march√©' THEN 'Au dessus du march√© üí∞'
                WHEN position_march√© = 'Offre √©quitable' THEN 'Offre √©quitable ü§ù'
                WHEN position_march√© = 'Analyse indisponible' THEN 'Analyse indisponible ‚ùå'
                ELSE position_march√©
            END as Position_march√©,
            lien
            FROM 'data/database.parquet'
            WHERE modele IN ({', '.join(f"'{modele.upper()}'" for modele in modeles)})
            AND annee BETWEEN {annee_min} AND {annee_max}
            AND kilometrage BETWEEN {km_min} AND {km_max}
            AND boite IN ({', '.join(f"'{b}'" for b in boite)})
            AND energie IN ({', '.join(f"'{erg}'" for erg in energie)})
            AND prix between {prix_min} AND {prix_max};
            """).pl()

    if marques != [] and modeles != []: 
        return duckdb.sql(
            f"""
            SELECT CONCAT(
            marque, ' ', modele, ' ',
            CASE WHEN generation = 'NA' THEN '' ELSE generation END,
            ' ', finition
            ) as V√©hicule, 
            cylindre, puissance, moteur, annee, boite, energie, kilometrage, prix, 
            CASE
                WHEN position_march√© = 'Bonne affaire' THEN 'Bonne affaire üëç'
                WHEN position_march√© = 'Tr√®s bonne affaire' THEN 'Tr√®s bonne affaire üåü'
                WHEN position_march√© = 'Au dessus du march√©' THEN 'Au dessus du march√© üí∞'
                WHEN position_march√© = 'Offre √©quitable' THEN 'Offre √©quitable ü§ù'
                WHEN position_march√© = 'Analyse indisponible' THEN 'Analyse indisponible ‚ùå'
                ELSE position_march√©
            END as Position_march√©,
            lien
            FROM 'data/database.parquet'
            WHERE marque IN ({', '.join(f"'{marque}'" for marque in marques)}) 
            AND modele IN ({', '.join(f"'{modele.upper()}'" for modele in modeles)})
            AND annee BETWEEN {annee_min} AND {annee_max}
            AND kilometrage BETWEEN {km_min} AND {km_max}
            AND boite IN ({', '.join(f"'{b}'" for b in boite)})
            AND energie IN ({', '.join(f"'{erg}'" for erg in energie)})
            AND prix between {prix_min} AND {prix_max};
            """).pl()

    
